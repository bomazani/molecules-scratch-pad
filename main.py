#!/usr/bin/env python
# -*- coding: utf-8 -*-

from itertools import permutations
"""
Molecules Assessment
"""

_author_ = "bomazani, Stew, with mob-coding assistance"


molecules_to_check = """OIAGFLHMHCNH
PNNNAOHDHMCK
EHPLBAKAIKGN
GNJNAGEPDCMD
AEGHAICEABPB
BJBJEHGKFPHF
FLEINAMOECFF
LHJLJJMKCOEG
FKAKKHPPDDIA
EEOIGENBLHME
AJPCHDJMNJHH
BGHEKPEODDGJ
HELCLHHLAGNH
JGEGALOBBFFL
EJJHMAADELGP
DNKDDHLMOPCO
KAPLFEHJNAAK
ABNEMDDPANDD
FOPDNCBHCACI
EJBBKCLKDJPP
MCPNACAFAAIN
CJEEJGMNAOOK
AKEDDDCPGBMG
DNLDNDAPMEDF
LACLOAFOKJBN
NDNDFJJIGEMD
HMCDBGIMGKHE
KMCFFDCCGPFL
JOEPCADJMFMN
LEJBOAFJMHOC
KAEBAKMJIAIL
ALENBBKMFEOE
EDNBLLDFLHGL
BDEKDNFEIJBJ
KLGAPEEEHBFC
MIIHPODBBHLF
EAJNJKGEFMEF
AIJIJOKFGCMF
BPGCHBHLBAIL
KPPALDFMLOEE
MOJCBFHCFOEM
PMHBMAMHPLHK
OMGJKKNGJGIK
LPMANAMNMEOJ
EKADFHNDDEMN
OJDHPLBKKNLI
OHFKLDDPNDCC
KAFNEBKCKNKJ
ILDDJOLHGABB
DFBAIDCDDHAH
ILKCIELBPOEI
NPPDPBECGFCO
JEBMLCEDNOFF
CAGBOKKLJJOI
KDKAIMPBAAOL
CCOPADFCDLDC
GNNPHMIBPCCH
PBJPBHLEJJDJ
NILAEOCKMAJD
MBELEGCDHLCJ
CNNLHAEEJPEN
OHHKHANDCBOG
IAJPMLIOJFKA
GOEPOIMMPDGG
DDJFEHLMIEME
AECJKMJALNPJ
FLFFOLLBOFHC
MCPEHLIHPLAJ
HJJCGILLDAAB
LMDJBKMNMLCD
GKKFFKPNDIPJ
BLFELFGHBJAC
DMAPHCDNMNDC
ICPLKOFLJKAF
PGMBPMDCJDBA
FEOCCBEKDDFN
BKJLEJAEPMFO
IIABMBCBGADI
BHCEKHBMCKHG
DHKCDPALIANE
CPFIPJAAACEL
JFHLAOCDFMGI
MGDEHAIJPNBO
GBOHDCCMIJII
HKLMGBECIHGP
IOIHMJGCKEJN
HLJPEBHLLCHC
ELEMDLLLJDCF
MIIGNBDENMDB
OKNJMELAAAMD
LHOEKAKGJCMG
DPKAMNCKHPDD
DPEDPAGKIEOC
FIJOKFEOFOOB
LALCPOFDNJGM
KNGCBFEGNNEI
DIGIGEJBFEDE
CJHACOMMLDOM
IDDFAHNDADLG
IEINILBLEJLH
HHDCKCOCFBIF
JFJJJEPBJHOB
DPMHIHOPPCBJ
EAMJBEOKJHDC
MDDFKBGNBDFJ
KDJJFKDJKPCM
DBGMIKPENCJH
EAFFDKONNHHD
CKMMJPIMAPII
JHNGKGNOGCDJ
MBHKJONLIJHB
IANIPFBINOOH
ELFLOIEKJLEC
JBNBLFCDFPME
FNMCLKJPFOKD
GPOPKCCEEPFP
EICJHONMLJOG
DHGJFAMLPKLK
NNOBMDABLCKD
BIPMBODFFJOL
JKGJFBDCOBDL
EDMAFGDGOCDA
AGFGPDBINHBC
JEEHFHCKKOKA
FNGDPJDAPIGO
LHHJOILHNAPC
HBMCAGCFDIID
CMDBEJAAAHJO
PEGMEFPMGLOG
CALFIEIKALME
EMEEDNDCCJPG
OOCEJALLAGBJ
KJDKFPPJLDOO
BBBDKAJIOMMH
MHDNOEGINJDC
JCMEFKDGLEJF
EDNCPJJLBMIP
AOHOIKABMMFC
GIIBMCGAFDCE
NMPOIINJGEHO
PHPLEFNKNGMK
ICKNGNBDJABB
IOKPCBNBJNNN
CKHPADJIGEFM
BGPKHALPOGOA
HMCAJPNLJFKK
IECOIIKJOJDF
JOFHEDIMPKMI
JKDCPOMHCPGK
HADFKGLDEALJ
DDFDNBLGLPIK
NFCPEIJLIMAC
CLGGLBPPEECB
GNHBMPMJEOII
GBDONEBPPHGL
IFKMKMNAJEBG
DNPILIABJEAH
IBGHIMCACMMM
IJMCNNIALHIG
PJIJNIAFJGMB
DPBFLNBEGNGD
KODFFMMFFEOC
MOHFEDGHCHMO
ENCKKINFGAKL
MGABKODGMKLB
OBIAIFOMCAGN
IDCOEMKADKCN
JFEFAPGOBPOJ
ENGGNMDGAFEE
COEFJGCCMGHM
GOKHNIABFGHD
DLJDANHCMLHF
CKHOAOKGMENJ
MOKCECFHNOKN
LBAHNHMPBDNC
CHIOLGIHECJI
EOABMKPIMPPJ
GMIIPFKBMCAH
IIOMKIFPGFAD
PPLLOKEFGMNG
BHHNJHECPDOK
LDJBIJEIJPDH
KIMAEJGGAODK
FIMFLKPGOIHG
BMOKLCCFKOGO
IMEIKICAAOFL
JEBHMINNEMIA
OKFIILGAILJC
DLCDKHODLPKH
HHFMDNMBHBJP
NAAFLJHOEKBO
BPBNOLEFDJBG
GNINPBNMBNBM
GIKKCLJEKKBI
GFOJPPPFNHDM
JAIKNJHDBBNE
NGIHBJAHOOAN
NPDKHGGAGOKD
HBGJDDNAKFHL
OHCMFCKDBNNI
DEIJCDMKECDH
FAHPFPKDGMPM
OJPAGMIJABCD
EONIAAAGAHFF
GAINMHJLBILH
EDBFEDIICFBC
FBIFIOKPOCMK
JFFKNACBEDGI
GOBIDCLIDDNL
BHKPJGKDLPNI
APKECAMJPNBC
PMLCAIOBAIBJ
PLMKKKDKJNOM
NLFMIGPIDKKD
CIECBFMAAIKL
CNFMKEIIPNEH
DDPGNKJACOCD
DODEHOPJLEFG
INOHKCPOGOED
IODLMGOPECDL
ACFLHKBPIPHC
CGAIEFLNDPIP
FGOJICFIEKEL
EFLMFCPHIPPM
EKJHJBGOIFIA
HNJLHNHLCCIH
EHOMGNILICCB
DJALOIMFFFAM
CHHEJPMNGKJN
ICIAEKBHDBDB
JPGOEHKGOCKI
BGFIBPFJBNJF
HKMLMPMFODEC
KOIIADACJGKK
FPDGMMLDHHOD
HLIFOMIILAAL
DBNNHHHMGLCC
HNGOEEBLPKBN
GJFBJGNNHKKO
CBKIMMLEJBCN
FEJFOKCEDIGM
ODJFNDDPFNIB
JDFCEIPJMIOK
CBOFJECHHLMF
PPEEMMFFPLHD
DGNPPLJBMHHF
MJMDEIIDHNHD
JNIJIPMLGJKF
FDGBKNHGGDKL
MCODPGHJDPCL
POGFIAKNDAON
OFEEJOPFAOIA
EPJHPLCOJIDB
INOLNNILCMAL
KPALNJLBIEIH
PKFICIKKFIFD
FOOIKODFOEAL
NLNFPFNOACGC
LANAJCDOACGL
AKAOOAKLLHAK
MNIMAOPLPMLI
OPGPBNKBHKAF
KKAFBAPNOHKO
FJJEFEMDDDCE
AMGHGGMAAMFB
MEOKLIIBBBFG
GCKJFMOFJEMP
KIAKEFLAKJLF
CDGDFMKLOEED
ACIJGEJAMJKA
OFAIPLOBPEEE
AOPOCDBDGJMM
NFNJOHJNNKFM
FDNEIBIIAHHC
LIFBCCNPHKJG
CCDPMILCMIGE
JPMJGDMBMBCO
DANLKGBMJELF
MGHIOOMINJBD
MNFIPHGCHENC
KOODCKJPAAHP
OEHLNIPJGECF
LIHDMFFHDDKG
NDFOEMNCAEON
MNHCBJHMBPPO
EEFHIPNFDCDH
PAJPEHNBEEDF
NLCOKBMOGBFO
BDDEFHLEHEEM
MBNAFAGCLIAF
JNDPOJNPMBDB
IOGPDKLPLIPA
JFCENCKHPNGO
GENCFBENPKMC
EIBPABPJGBOE
DILDFBBMFOOK
PCHPMEBAMDPM
EOGKPEODMJGB
LHNAFMLFOCEL
GFLCILPMJFHJ
JFMFPCGKJEKO
AFDOIHJONFBF
AACJFJCOOODN
AJHJNCINHLMP
DFOAKPFKPHEE
AGCPFFMFOEPM
GHJNCFNFLLFF
KLAJCENDKPCP
EOFCCEOILIGN
NDDIOIOIDOBG
COJMNLMBJBDM
FCEAKKNHNAAL
JODMMECOCLKP
GGAAHEMMGAMA
LKHIKHEDFHAB
MCPOOKOEAOEI
CAEIBBIMLAEF
HIJNAJOMLOKJ
IIOIHCAJDFCE
GKABKEGCNPPN
INJELDNDMLMD
OMMBBOFHJFID
JPFGOEDHCMLN
AIBMENPCJLDL
KICDNLGGKMNI
AAPCNKANDBJH
OIJHDMCNEFAB
AHHKDECDFCGC
MGPPHIGFAPMD
LPBPEBAEIIOL
MAPBCFDPLCOC
KFHKEDOACPPG
AAKJIIEEJDGL
IJKDMJFGOMBC
APCCOCJOCDHK
MMOFPEAIOLLK
EBACNBENAHAO
JJNLMEFIADNA
IOIGJDANEAPC
CDPCKPBDIOOF
CDNDHLDPJLFC
OFPDFOFHBEKM
ELPMJOBLBPOI
KBHDMMFLBEOH
CDODHIPLDPIM
NJIOIGHCIOFE
LKPMONDAACEI
KDDOCLKPFCON
JFABDFFOAFLO
COPDADLLGOJJ
KDIPGGMPLMAP
CFNCKIANHPAH
CLCJJLCDPKCF
BPEMLELNJJPE
BABIPBACMCLF
ONJNHLCIKGFG
KADDJDHLDIDC
JDEFGPLEMEBE
PDMKJBADCDGL
GOGJGKMANAFD
AAHMEIAELNOE
OOHABOMIMCBC
MNCKOINOIFKN
NLBJIPNGNFHO
DDGPFIBCFEMD
MJBEOMBMHCFP
BCFOHMNKPDJF
LLHBPDELMGPL
CBHJDMIFONDG
KAAJEKOPFFAE
IFPFLOANPHGD
DOIBLLHFMIPA
CNPHDALLFKAA
IANIHDLKBDMM
ODCKLBKNOKEB
KPNPJNPCOMKF
PFAAIMMGPOBL
PLIOFNPPMMOG
KNIIJCNIHNIP
JFFJDGEDCMBH
JAHGNFMHDEPM
GMFNKNMDCBMG
IAJKNKBGKIMH
OIOBMNNCKCPE
ALHCNEIFEBPB
LAIGJENHNMIJ
JFMDILHIHPKE
DDJHEIJAIBGB
FDICPAMJGIMO
DEGKDAOGDHNI
PGIIHOJNBCPB
CLKIDGGHKMBN
NADAHBIHHAPP
OIMAKLBNHLFK
BMBMIDJFDNGK
OOBFPAENJAND
MOADJGNLCPHK
CAAFNGPLEBBD
BFBKGOOCNOFG
ECBGBIBDJBIG
Q
"""


def grab_molecule(molecules_to_split):
    """Splits given list of strings into list of list with 4 strings each"""
    molecules = []
    molecules_to_split = molecules_to_split.split('\n')
    while molecules_to_split:
        molecules.append(molecules_to_split[:4])
        molecules_to_split = molecules_to_split[4:]
    return molecules


def rectangle_tuples(molecules_to_check):
    """Builds our possible rectangle dimensions based on string length"""
    str_length = len(molecules_to_check[0])
    pairs = [(w, h) for w in range(2, (str_length - 1))
             for h in range(w, (str_length - 1))]
    pairs.sort(
        key=lambda str_length: str_length[0] * str_length[1], reverse=True)
    return pairs


def best_fit(w, h, across1, down1, across2, down2):
    """
    Tries to fit a rectangle into a set of 4 molecule strings
    returns true if a fit is found.
    """
    for a1 in range(1, 12 - (w + 1)):
        for d1 in range(1, 12 - (h + 1)):
            if across1[a1] != down1[d1]:
                continue
            for a2 in range(1, 12 - (w + 1)):
                if across2[a2] != down1[d1 + (h + 1)]:
                    continue
                for d2 in range(1, 12 - (h + 1)):
                    if down2[d2] != across1[a1 + (w + 1)]:
                        continue
                    if down2[d2 + (h + 1)] == across2[a2 + (w + 1)]:
                        return True
    return False


def main():
    molecules_strings = grab_molecule(molecules_to_check)
    rectangle_dimensions = rectangle_tuples(molecules_strings[0])
    for molecule_strings in molecules_strings:
        answer = 0
        """Builds a list of all possible string permutations for molecule"""
        molecules_variations = list(permutations(molecule_strings))
        for w, h in rectangle_dimensions:
            if answer == 1:
                break
            for molecule_var in molecules_variations:
                if best_fit(w, h, *molecule_var):
                    print molecule_strings
                    print(w * h)
                    answer = 1
                    break
        if answer == 0:
            print molecule_strings
            print 0


if __name__ == '__main__':
    main()
